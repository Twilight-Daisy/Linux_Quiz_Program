#include <bits/stdc++.h>
#include <iostream>
#include <string>
#include <vector>
#include <list>
using namespace std;
/*
linked list을 이용해서 TaskList 콘테이너를 만듬
TaskList에 문제 30개를 넣을 수 있는 메소드를 만듬
Creating a container for questions.
Making a function which can input data into the linked list
*/
class TaskList
{
public:
    string data;
    TaskList *next;
};

void TaskListAdd(TaskList **head_ref, string new_data)
{
    TaskList *new_node = new TaskList();
    TaskList *last = *head_ref;
    new_node->data = new_data;
    new_node->next = NULL;
    if (*head_ref == NULL)
    {
        *head_ref = new_node;
        return;
    }
    while (last->next != NULL)
        last = last->next;
    last->next = new_node;
    return;
}
//------------------------------------------------------------------------------
/*
DataBase 클레스 안에 문제들과 대답들이 있음
vector 2 개를 만들어 안에 문제들과 대답을 순서대로 넣음
Create two vectors with questions and answers.
For easily access two vectors are located inside a class.

*/

class DataBase
{
public:
    vector<string> Answers;
    vector<string> Questions;

    DataBase()
    {
        Answers.push_back("mkdir");
        Answers.push_back("rmdir");
        Answers.push_back("Answer 3");
        Answers.push_back("Answer 4");
        Answers.push_back("Answer 5");
        Answers.push_back("Answer 6");
        Answers.push_back("Answer 7");
        Answers.push_back("Answer 8");
        Answers.push_back("Answer 9");
        Answers.push_back("Answer 10");
        Answers.push_back("Answer 11");
        Answers.push_back("Answer 12");
        Answers.push_back("Answer 13");
        Answers.push_back("Answer 14");
        Answers.push_back("Answer 15");
        Answers.push_back("Answer 16");
        Answers.push_back("Answer 17");
        Answers.push_back("Answer 18");
        Answers.push_back("Answer 19");
        Answers.push_back("Answer 20");
        Answers.push_back("Answer 21");
        Answers.push_back("Answer 22");
        Answers.push_back("Answer 23");
        Answers.push_back("Answer 24");
        Answers.push_back("Answer 25");
        Answers.push_back("Answer 26");
        Answers.push_back("Answer 27");
        Answers.push_back("Answer 28");
        Answers.push_back("Answer 29");
        Answers.push_back("Answer 30");
        Questions.push_back("디렉토리를 생성하는 명령어를 입력하시오");
        Questions.push_back("비어있는 디렉토리를 삭제하는 명령어를 입력하시오");
        Questions.push_back("Question 3");
        Questions.push_back("Question 4");
        Questions.push_back("Question 5");
        Questions.push_back("Question 6");
        Questions.push_back("Question 7");
        Questions.push_back("Question 8");
        Questions.push_back("Question 9");
        Questions.push_back("Question 10");
        Questions.push_back("Question 11");
        Questions.push_back("Question 12");
        Questions.push_back("Question 13");
        Questions.push_back("Question 14");
        Questions.push_back("Question 15");
        Questions.push_back("Question 16");
        Questions.push_back("Question 17");
        Questions.push_back("Question 18");
        Questions.push_back("Question 19");
        Questions.push_back("Question 20");
        Questions.push_back("Question 21");
        Questions.push_back("Question 22");
        Questions.push_back("Question 23");
        Questions.push_back("Question 24");
        Questions.push_back("Question 25");
        Questions.push_back("Question 26");
        Questions.push_back("Question 27");
        Questions.push_back("Question 28");
        Questions.push_back("Question 29");
        Questions.push_back("Question 30");
    }
};
//------------------------------------------------------------------------------
/*
linked list을 이용해서 AnswerList 콘테이너를 만듬
AnswerList에  맞는 대답 30개를 넣을 수 있는 메소드를 만듬
Creating a container for answers.
Making a function which can input data into the linked list
*/
class AnswrList
{
public:
    string data;
    AnswrList *next;
};

void AnswrListAdd(AnswrList **head_ref, string new_data)
{
    AnswrList *new_node = new AnswrList();
    AnswrList *last = *head_ref;
    new_node->data = new_data;
    new_node->next = NULL;
    if (*head_ref == NULL)
    {
        *head_ref = new_node;
        return;
    }
    while (last->next != NULL)
        last = last->next;
    last->next = new_node;
    return;
}
//------------------------------------------------------------------------------
int main()
{
    DataBase call; // calls a class where are stored questions and right answers
    TaskList *first = NULL;// creating first node in the linked list
    AnswrList *head = NULL;
    string answer;
    int score = 0;
    for (int i = 0; i < call.Questions.size(); i++)//Puts data from the vector into the linked list
    {
        string new_data;
        new_data = call.Questions[i];
        TaskListAdd(&first, new_data);
    }

    for (int i = 0; i < call.Answers.size(); i++)
    {
        string new_data;
        new_data = call.Answers[i];
        AnswrListAdd(&head, new_data);
    }
    cout << "Try to answer all 30 questions" << endl;
    cout << "To quit the quiz press  0 [Leave]" << endl; //종료
    cout << "To skip a question press + [Skip]" << endl; //다음 분제로 넘어가기
    while (first != NULL)
    {
        cout << first->data << "\n";
        getline(cin, answer);
        if (answer != "+" && answer != "0")
        {
            if (answer == head->data)
            {
                cout << "Right" << endl;
                first = first->next;
                head = head->next;
                score++;
            }
        }
        else if (answer == "+")
        {
            first = first->next;
            head = head->next;
        }
        else if (answer == "0")
        {
            break;
        }
        system("clear");
        cout << "Try to answer all 30 questions" << endl;
        cout << "To quit the quiz press  0 [Leave]" << endl;
        cout << "To skip a question press + [Skip]" << endl;
    }
    cout << "Your score is: " << score << endl;
    return 0;
}
